{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2f49c46f",
   "metadata": {
    "papermill": {
     "duration": 0.005802,
     "end_time": "2024-07-11T07:25:48.508106",
     "exception": false,
     "start_time": "2024-07-11T07:25:48.502304",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**This notebook is an exercise in the [Intro to Deep Learning](https://www.kaggle.com/learn/intro-to-deep-learning) course.  You can reference the tutorial at [this link](https://www.kaggle.com/ryanholbrook/binary-classification).**\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "277beba9",
   "metadata": {
    "papermill": {
     "duration": 0.004964,
     "end_time": "2024-07-11T07:25:48.518545",
     "exception": false,
     "start_time": "2024-07-11T07:25:48.513581",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Introduction #\n",
    "\n",
    "In this exercise, you'll build a model to predict hotel cancellations with a binary classifier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dfedae18",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:25:48.531097Z",
     "iopub.status.busy": "2024-07-11T07:25:48.530380Z",
     "iopub.status.idle": "2024-07-11T07:25:49.446420Z",
     "shell.execute_reply": "2024-07-11T07:25:49.445453Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.92542,
     "end_time": "2024-07-11T07:25:49.449116",
     "exception": false,
     "start_time": "2024-07-11T07:25:48.523696",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/3338970720.py:3: MatplotlibDeprecationWarning: The seaborn styles shipped by Matplotlib are deprecated since 3.6, as they no longer correspond to the styles shipped by seaborn. However, they will remain available as 'seaborn-v0_8-<style>'. Alternatively, directly use the seaborn API instead.\n",
      "  plt.style.use('seaborn-whitegrid')\n"
     ]
    }
   ],
   "source": [
    "# Setup plotting\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('seaborn-whitegrid')\n",
    "# Set Matplotlib defaults\n",
    "plt.rc('figure', autolayout=True)\n",
    "plt.rc('axes', labelweight='bold', labelsize='large',\n",
    "       titleweight='bold', titlesize=18, titlepad=10)\n",
    "plt.rc('animation', html='html5')\n",
    "\n",
    "# Setup feedback system\n",
    "from learntools.core import binder\n",
    "binder.bind(globals())\n",
    "from learntools.deep_learning_intro.ex6 import *"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2baa6c02",
   "metadata": {
    "papermill": {
     "duration": 0.005026,
     "end_time": "2024-07-11T07:25:49.459720",
     "exception": false,
     "start_time": "2024-07-11T07:25:49.454694",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "First, load the *Hotel Cancellations* dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "69da5df2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:25:49.472253Z",
     "iopub.status.busy": "2024-07-11T07:25:49.471636Z",
     "iopub.status.idle": "2024-07-11T07:25:52.615243Z",
     "shell.execute_reply": "2024-07-11T07:25:52.614142Z"
    },
    "lines_to_next_cell": 2,
    "papermill": {
     "duration": 3.15294,
     "end_time": "2024-07-11T07:25:52.617850",
     "exception": false,
     "start_time": "2024-07-11T07:25:49.464910",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.compose import make_column_transformer\n",
    "\n",
    "hotel = pd.read_csv('../input/dl-course-data/hotel.csv')\n",
    "\n",
    "X = hotel.copy()\n",
    "y = X.pop('is_canceled')\n",
    "\n",
    "X['arrival_date_month'] = \\\n",
    "    X['arrival_date_month'].map(\n",
    "        {'January':1, 'February': 2, 'March':3,\n",
    "         'April':4, 'May':5, 'June':6, 'July':7,\n",
    "         'August':8, 'September':9, 'October':10,\n",
    "         'November':11, 'December':12}\n",
    "    )\n",
    "\n",
    "features_num = [\n",
    "    \"lead_time\", \"arrival_date_week_number\",\n",
    "    \"arrival_date_day_of_month\", \"stays_in_weekend_nights\",\n",
    "    \"stays_in_week_nights\", \"adults\", \"children\", \"babies\",\n",
    "    \"is_repeated_guest\", \"previous_cancellations\",\n",
    "    \"previous_bookings_not_canceled\", \"required_car_parking_spaces\",\n",
    "    \"total_of_special_requests\", \"adr\",\n",
    "]\n",
    "features_cat = [\n",
    "    \"hotel\", \"arrival_date_month\", \"meal\",\n",
    "    \"market_segment\", \"distribution_channel\",\n",
    "    \"reserved_room_type\", \"deposit_type\", \"customer_type\",\n",
    "]\n",
    "\n",
    "transformer_num = make_pipeline(\n",
    "    SimpleImputer(strategy=\"constant\"), # there are a few missing values\n",
    "    StandardScaler(),\n",
    ")\n",
    "transformer_cat = make_pipeline(\n",
    "    SimpleImputer(strategy=\"constant\", fill_value=\"NA\"),\n",
    "    OneHotEncoder(handle_unknown='ignore'),\n",
    ")\n",
    "\n",
    "preprocessor = make_column_transformer(\n",
    "    (transformer_num, features_num),\n",
    "    (transformer_cat, features_cat),\n",
    ")\n",
    "\n",
    "# stratify - make sure classes are evenlly represented across splits\n",
    "X_train, X_valid, y_train, y_valid = \\\n",
    "    train_test_split(X, y, stratify=y, train_size=0.75)\n",
    "\n",
    "X_train = preprocessor.fit_transform(X_train)\n",
    "X_valid = preprocessor.transform(X_valid)\n",
    "\n",
    "input_shape = [X_train.shape[1]]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40cadc42",
   "metadata": {
    "papermill": {
     "duration": 0.005395,
     "end_time": "2024-07-11T07:25:52.628824",
     "exception": false,
     "start_time": "2024-07-11T07:25:52.623429",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 1) Define Model #\n",
    "\n",
    "The model we'll use this time will have both batch normalization and dropout layers. To ease reading we've broken the diagram into blocks, but you can define it layer by layer as usual.\n",
    "\n",
    "Define a model with an architecture given by this diagram:\n",
    "\n",
    "<figure style=\"padding: 1em;\">\n",
    "<img src=\"https://storage.googleapis.com/kaggle-media/learn/images/V04o59Z.png\" width=\"400\" alt=\"Diagram of network architecture: BatchNorm, Dense, BatchNorm, Dropout, Dense, BatchNorm, Dropout, Dense.\">\n",
    "<figcaption style=\"textalign: center; font-style: italic\"><center>Diagram of a binary classifier.</center></figcaption>\n",
    "</figure>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cd6cfa20",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:25:52.642040Z",
     "iopub.status.busy": "2024-07-11T07:25:52.641060Z",
     "iopub.status.idle": "2024-07-11T07:26:06.454141Z",
     "shell.execute_reply": "2024-07-11T07:26:06.452974Z"
    },
    "lines_to_next_cell": 2,
    "papermill": {
     "duration": 13.822177,
     "end_time": "2024-07-11T07:26:06.456729",
     "exception": false,
     "start_time": "2024-07-11T07:25:52.634552",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-07-11 07:25:54.606039: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-07-11 07:25:54.606163: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-07-11 07:25:54.758362: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.3333333333333333, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"1_Q1\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from tensorflow import keras\n",
    "from tensorflow.keras import layers\n",
    "\n",
    "# YOUR CODE HERE: define the model given in the diagram\n",
    "model = model = keras.Sequential([\n",
    "    layers.InputLayer(input_shape=input_shape),  \n",
    "    layers.BatchNormalization(),                \n",
    "    layers.Dense(256, activation='relu'),       \n",
    "    layers.BatchNormalization(),                \n",
    "    layers.Dropout(0.5),                        \n",
    "    layers.Dense(256, activation='relu'),         \n",
    "    layers.BatchNormalization(),                \n",
    "    layers.Dropout(0.5),                        \n",
    "    layers.Dense(1, activation='sigmoid')        \n",
    "])\n",
    "\n",
    "# Check your answer\n",
    "q_1.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62bd4816",
   "metadata": {
    "papermill": {
     "duration": 0.005774,
     "end_time": "2024-07-11T07:26:06.468344",
     "exception": false,
     "start_time": "2024-07-11T07:26:06.462570",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2) Add Optimizer, Loss, and Metric #\n",
    "\n",
    "Now compile the model with the Adam optimizer and binary versions of the cross-entropy loss and accuracy metric."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d110bc85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:26:06.481559Z",
     "iopub.status.busy": "2024-07-11T07:26:06.481177Z",
     "iopub.status.idle": "2024-07-11T07:26:06.506080Z",
     "shell.execute_reply": "2024-07-11T07:26:06.504949Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.034212,
     "end_time": "2024-07-11T07:26:06.508329",
     "exception": false,
     "start_time": "2024-07-11T07:26:06.474117",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.3333333333333333, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"2_Q2\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# YOUR CODE HERE\n",
    "model.compile(\n",
    "    optimizer='adam',\n",
    "    loss='binary_crossentropy',\n",
    "    metrics=['binary_accuracy'],\n",
    ")\n",
    "\n",
    "# Check your answer\n",
    "q_2.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "21dc05d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:26:06.522377Z",
     "iopub.status.busy": "2024-07-11T07:26:06.521992Z",
     "iopub.status.idle": "2024-07-11T07:26:06.526738Z",
     "shell.execute_reply": "2024-07-11T07:26:06.525633Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.01452,
     "end_time": "2024-07-11T07:26:06.529037",
     "exception": false,
     "start_time": "2024-07-11T07:26:06.514517",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#q_2.hint()\n",
    "# q_2.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b8cdd77",
   "metadata": {
    "papermill": {
     "duration": 0.005929,
     "end_time": "2024-07-11T07:26:06.541181",
     "exception": false,
     "start_time": "2024-07-11T07:26:06.535252",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Finally, run this cell to train the model and view the learning curves. It may run for around 60 to 70 epochs, which could take a minute or two."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c1718a0c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:26:06.555631Z",
     "iopub.status.busy": "2024-07-11T07:26:06.554893Z",
     "iopub.status.idle": "2024-07-11T07:27:30.401438Z",
     "shell.execute_reply": "2024-07-11T07:27:30.400390Z"
    },
    "papermill": {
     "duration": 83.856575,
     "end_time": "2024-07-11T07:27:30.404023",
     "exception": false,
     "start_time": "2024-07-11T07:26:06.547448",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/200\n",
      "175/175 [==============================] - 4s 14ms/step - loss: 0.5216 - binary_accuracy: 0.7521 - val_loss: 0.4541 - val_binary_accuracy: 0.8023\n",
      "Epoch 2/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.4414 - binary_accuracy: 0.7912 - val_loss: 0.4177 - val_binary_accuracy: 0.8079\n",
      "Epoch 3/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.4250 - binary_accuracy: 0.8012 - val_loss: 0.4081 - val_binary_accuracy: 0.8128\n",
      "Epoch 4/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.4168 - binary_accuracy: 0.8043 - val_loss: 0.4020 - val_binary_accuracy: 0.8135\n",
      "Epoch 5/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.4110 - binary_accuracy: 0.8075 - val_loss: 0.3987 - val_binary_accuracy: 0.8166\n",
      "Epoch 6/200\n",
      "175/175 [==============================] - 2s 13ms/step - loss: 0.4080 - binary_accuracy: 0.8102 - val_loss: 0.3973 - val_binary_accuracy: 0.8179\n",
      "Epoch 7/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.4049 - binary_accuracy: 0.8107 - val_loss: 0.3922 - val_binary_accuracy: 0.8184\n",
      "Epoch 8/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.4005 - binary_accuracy: 0.8128 - val_loss: 0.3909 - val_binary_accuracy: 0.8211\n",
      "Epoch 9/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.3982 - binary_accuracy: 0.8150 - val_loss: 0.3891 - val_binary_accuracy: 0.8218\n",
      "Epoch 10/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.3954 - binary_accuracy: 0.8153 - val_loss: 0.3904 - val_binary_accuracy: 0.8220\n",
      "Epoch 11/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.3934 - binary_accuracy: 0.8161 - val_loss: 0.3817 - val_binary_accuracy: 0.8231\n",
      "Epoch 12/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.3916 - binary_accuracy: 0.8184 - val_loss: 0.3819 - val_binary_accuracy: 0.8256\n",
      "Epoch 13/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.3888 - binary_accuracy: 0.8195 - val_loss: 0.3826 - val_binary_accuracy: 0.8257\n",
      "Epoch 14/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.3853 - binary_accuracy: 0.8214 - val_loss: 0.3789 - val_binary_accuracy: 0.8267\n",
      "Epoch 15/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.3860 - binary_accuracy: 0.8209 - val_loss: 0.3763 - val_binary_accuracy: 0.8309\n",
      "Epoch 16/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.3830 - binary_accuracy: 0.8224 - val_loss: 0.3731 - val_binary_accuracy: 0.8311\n",
      "Epoch 17/200\n",
      "175/175 [==============================] - 2s 11ms/step - loss: 0.3820 - binary_accuracy: 0.8224 - val_loss: 0.3734 - val_binary_accuracy: 0.8312\n",
      "Epoch 18/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.3811 - binary_accuracy: 0.8249 - val_loss: 0.3732 - val_binary_accuracy: 0.8311\n",
      "Epoch 19/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.3798 - binary_accuracy: 0.8246 - val_loss: 0.3717 - val_binary_accuracy: 0.8316\n",
      "Epoch 20/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.3791 - binary_accuracy: 0.8247 - val_loss: 0.3710 - val_binary_accuracy: 0.8327\n",
      "Epoch 21/200\n",
      "175/175 [==============================] - 2s 14ms/step - loss: 0.3789 - binary_accuracy: 0.8247 - val_loss: 0.3696 - val_binary_accuracy: 0.8323\n",
      "Epoch 22/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.3763 - binary_accuracy: 0.8259 - val_loss: 0.3785 - val_binary_accuracy: 0.8302\n",
      "Epoch 23/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.3745 - binary_accuracy: 0.8271 - val_loss: 0.3705 - val_binary_accuracy: 0.8331\n",
      "Epoch 24/200\n",
      "175/175 [==============================] - 2s 11ms/step - loss: 0.3742 - binary_accuracy: 0.8277 - val_loss: 0.3679 - val_binary_accuracy: 0.8333\n",
      "Epoch 25/200\n",
      "175/175 [==============================] - 2s 11ms/step - loss: 0.3736 - binary_accuracy: 0.8273 - val_loss: 0.3691 - val_binary_accuracy: 0.8328\n",
      "Epoch 26/200\n",
      "175/175 [==============================] - 2s 11ms/step - loss: 0.3724 - binary_accuracy: 0.8278 - val_loss: 0.3643 - val_binary_accuracy: 0.8355\n",
      "Epoch 27/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.3710 - binary_accuracy: 0.8290 - val_loss: 0.3675 - val_binary_accuracy: 0.8344\n",
      "Epoch 28/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.3701 - binary_accuracy: 0.8285 - val_loss: 0.3642 - val_binary_accuracy: 0.8344\n",
      "Epoch 29/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.3687 - binary_accuracy: 0.8295 - val_loss: 0.3692 - val_binary_accuracy: 0.8329\n",
      "Epoch 30/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.3691 - binary_accuracy: 0.8296 - val_loss: 0.3665 - val_binary_accuracy: 0.8338\n",
      "Epoch 31/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.3675 - binary_accuracy: 0.8299 - val_loss: 0.3631 - val_binary_accuracy: 0.8343\n",
      "Epoch 32/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.3678 - binary_accuracy: 0.8304 - val_loss: 0.3628 - val_binary_accuracy: 0.8355\n",
      "Epoch 33/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.3668 - binary_accuracy: 0.8318 - val_loss: 0.3623 - val_binary_accuracy: 0.8365\n",
      "Epoch 34/200\n",
      "175/175 [==============================] - 2s 11ms/step - loss: 0.3651 - binary_accuracy: 0.8306 - val_loss: 0.3603 - val_binary_accuracy: 0.8358\n",
      "Epoch 35/200\n",
      "175/175 [==============================] - 2s 11ms/step - loss: 0.3649 - binary_accuracy: 0.8317 - val_loss: 0.3598 - val_binary_accuracy: 0.8358\n",
      "Epoch 36/200\n",
      "175/175 [==============================] - 2s 11ms/step - loss: 0.3638 - binary_accuracy: 0.8316 - val_loss: 0.3613 - val_binary_accuracy: 0.8366\n",
      "Epoch 37/200\n",
      "175/175 [==============================] - 2s 13ms/step - loss: 0.3639 - binary_accuracy: 0.8321 - val_loss: 0.3621 - val_binary_accuracy: 0.8364\n",
      "Epoch 38/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.3640 - binary_accuracy: 0.8326 - val_loss: 0.3604 - val_binary_accuracy: 0.8355\n",
      "Epoch 39/200\n",
      "175/175 [==============================] - 2s 12ms/step - loss: 0.3617 - binary_accuracy: 0.8333 - val_loss: 0.3629 - val_binary_accuracy: 0.8338\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: title={'center': 'Accuracy'}>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAnYAAAHVCAYAAAB8NLYkAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8WgzjOAAAACXBIWXMAAA9hAAAPYQGoP6dpAAByoUlEQVR4nO3dd3hUVeLG8e/MpJOQRqihQ0INBEEQFaQIiIJ0XERXf6wiK+q6qNgRG1hwBXVd14KIqKs0pYgdK4JIIDQD0kuAkARILzPz++MmA8MEyIQkM0nez/PMkzt37r1z5jCQl3PuOcdkt9vtiIiIiEiVZ/Z0AURERESkfCjYiYiIiFQTCnYiIiIi1YSCnYiIiEg1oWAnIiIiUk0o2ImIiIhUEwp2IiIiItWEgp2IiIhINaFgJyIiIlJNKNiJiIiIVBM+ni6AiFQPX3/9NXfeeafL/oEDBzJnzhwPlEhEpOZRi52IlIvFixeXuP/bb7/lxIkTlVsYEZEaSsFORC5aWloaP/zwQ4mvFRQUsHz58koukYhIzaRgJyIX7bPPPqOgoOCcr5+rNU9ERMqX7rETkYu2ZMkSp+d9+/bl22+/dTzfunUrO3bsICYm5pzXsNvt/PDDD6xcuZLExERSUlLIzc0lLCyMBg0acOmllzJkyBDatGnjcm5hYSFffvklX331FVu2bCE1NZWCggIiIiJo1KgRl112GcOGDaNx48ZOZTx06JDj+eTJk7nrrrucrvvKK6/w6quvOp43atTI6XOd6zoTJ07k3XffZeXKlezbt4/s7Gzee+89unfvTmpqKl999RXbtm0jKSmJ1NRUTpw4QU5ODoGBgTRo0IAOHTowdOhQLrvssnPWl7t1tn79em688UbHuSaTia+//pro6GiX677zzjs899xzjuf169fnu+++w2xWW4CIt1OwE5GLsn37dv744w+nff/85z85cuQI27Ztc+xbsmQJU6dOLfEaBw4c4L777mPjxo0ur6WkpJCSkkJiYiL5+fk88sgjTq9v27aNKVOmsHv3bpdzjxw5wpEjR/j9998JCQnhlltucf8DuikzM5MbbriBrVu3lvh6QkIC06ZNK/G1jIwMMjIy2LFjB4sXL2bw4MG88MIL+Pi4/lPtbp117dqVdu3aOf5M7HY7n3zyCffee6/L+StXrnR6Pnz4cIU6kSpCf1NF5KKc3c3arl07WrduzdChQ532L1u2jMLCQpfzjx49yvjx40sMKBeSlJTEzTffXGKo85T333//nKHOXStXrnRqMSxW1jobP3680/PFixdjtVqd9h04cIDNmzc7nptMJkaOHOnW+4iI56jFTkTKrKSBEddffz0A1157LS+88IIjOKSkpPDjjz/Sp08fp+OfeeYZjhw54rSvffv2/O1vfyM2NhabzUZSUhLLli3DZDI5jrHb7Tz88MNkZGQ4ndujRw/++te/0rx5c/Ly8tiyZUul3uNXWFhIcHAwd911Fz179qSwsJBNmzZRp04dAMxmM507d6ZPnz7ExMQQGRlJaGgoubm57N27l3nz5rFhwwbH9d577z3+/ve/4+fn59hX1jobMmQIL774ImlpaQAcO3aM7777jv79+zuO+fzzz52ue+mllzp1YYuId1OwE5Ey+/777x0hAcBisXDttdcCULduXXr06MHPP//seH3JkiVOwe7o0aN88cUXTtfs3Lkz8+fPdwoyrVu35rrrruPUqVOOfQkJCWzZssXp3IEDBzJ79mynMNOmTRtGjRrldG5FmzVrFldddZXjebt27Rzbffv2pW/fviWe16ZNG7p3706PHj0c+7Kysti+fTudOnUCLq7O/Pz8GDNmDP/5z38c+z7++GOnYLdq1Sqna48aNao0H1lEvISCnYiU2dktYT179iQqKsrxfOjQoU7BrnhOu7CwMADWrl3rcs0777zTKaCcqXbt2o7tks695557nELduc6tSO3atXMKdSVJSUlh4cKF/Prrr+zdu5eTJ0+Sm5uL3W4v8fgjR444gt3F1BnAuHHjeOuttxzd4j/++CPJyck0aNCAffv2OXUjh4SEMGDAgPN+FhHxLrrHTkTKpKS564q7YYtdffXVBAYGOp6f3XV77Ngxl+t26NChVO9/9rmBgYG0bNmyVOdWpLZt25739W+//ZYBAwbw8ssv8+uvv3LkyBFycnLOGeoAsrOzHdsXU2cA9erVY+DAgY7nNpuNhQsXAq7dsNdddx0BAQGlvraIeJ6CnYiUSUlz1913333ExsY6Hl26dCEnJ8fpGG+d0+7sQQQA6enpbl+nbt2653wtLS2N++67zymolcb5Ql9Z3HTTTU7PFy1ahM1mcxkNq25YkapHwU5EyuTsuetKq3hOOyg5BJ1939y5nH1uTk4Ou3btKnU5LBaL0/Pc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8nBpRERERE5TsHOTBk6IiIiIt1Kwc5OWExMRERFvpWDnpjTHiFgFOxEREfEuCnZuStVyYiIiIuKlFOzclJapVSdERETEOynYuUmDJ0RERMRbKdi5SYMnRERExFsp2LnpzHnsRERERLyJgp2b1BUrIiIi3krBzg15hVYy8woBiNSoWBEREfEyCnZuKG6t8zGbqB3o4+HSiIiIiDhTsHNDatFUJ+FaJ1ZERES8kIKdGzRwQkRERLyZgp0bNHBCREREvJmCnRs0h52IiIh4MwU7N6Rm5gHqihURERHvpGDnhtNdsZrqRERERLyPgp0bHF2xwWqxExEREe+jYOcGjYoVERERb6Zg5waNihURERFvpmDnBg2eEBEREW+mYFdKBVYbp3KNdWLVYiciIiLeSMGulNKLumFNJggLUrATERER76NgV0rFI2LDg/ywmLVOrIiIiHgfBbtS0sAJERER8XYKdqWk5cRERETE2ynYlVJa0YjYOpqcWERERLyUgl0pqStWREREvJ2CXSmlap1YERER8XIKdqWk5cRERETE2ynYlZIGT4iIiIi3U7ArJbXYiYiIiLdTsCslx+AJjYoVERERL6VgVwpWm530bHXFioiIiHdTsCuFEzkF2O3GdrjWiRUREREvpWBXCsXdsKGBvvhaVGUiIiLinZRSSkEDJ0RERKQqKFOwW7BgAX379qVjx46MHj2axMTEcx570003ERsb6/K4/fbbnY7btWsXd9xxB5dccgmdO3dm5MiRHD58uCzFK3dadUJERESqAh93T1i5ciUzZsxg+vTpdOrUiXnz5jFhwgRWrVpFZGSky/GvvPIKBQUFjucnTpzg+uuvZ9CgQY59+/fvZ9y4cYwcOZK7776b4OBgdu7cib+/d6zyoGAnIiIiVYHbwW7u3LmMGTOGkSNHAjB9+nRWr17NokWLXFrhAMLCwpyer1ixgoCAAKdg969//YtevXrxwAMPOPY1adLkgmWxWq1YrVZ3P0KpFV/7eEYuAOFBvhX6ft6u+LPX5Do4m+rElerElerEmerDlerElerkNHfqwK1gl5+fz9atW5k4caJjn9lspmfPniQkJJTqGosWLeLaa68lKCgIAJvNxurVq/nb3/7GhAkT2LZtG9HR0UycOJH+/fuf91o7duxwp/hltvPAEQAKMtPZuHFjpbynN9u8ebOni+B1VCeuVCeuVCfOVB+uVCeuVCfucSvYpaenY7VaXbpcIyMj2b179wXPT0xMZMeOHTzzzDOOfampqWRnZ/Pmm2/yj3/8g/vuu48ff/yRyZMn895773HppZee83oxMTGOgFgRrFYrmzdvxhQQAmTTrkVjOnduVmHv5+2K66Njx45YLBZPF8crqE5cqU5cqU6cqT5cqU5cqU5Oy87OLnVjlttdsRdj4cKFxMTEEBcX59hns9kA6NevH7fccgsAbdu2ZcOGDXz00UfnDXYWi6VS/rDTs417BOuEBNT4LxdUXr1XJaoTV6oTV6oTZ6oPV6oTV6oT3Pr8bo2KDQ8Px2KxkJqa6rQ/NTWVOnXqnPfc7OxsVqxYwahRo1yu6ePjQ8uWLZ32t2zZUqNiRURERNzgVrDz8/Ojffv2rFmzxrHPZrOxZs0a4uPjz3vuqlWryM/PZ+jQoS7X7NixI3v27HHav3fvXho1auRO8SpMWpbRYqdgJyIiIt7M7Xnsbr31Vj7++GOWLFnCrl27eOKJJ8jJyWHEiBEAPPDAA8yaNcvlvIULF9K/f3/Cw8NdXpswYQKff/45H3/8Mfv27eP999/nu+++4y9/+UsZPlL5stntpBWtExsZrGAnIiIi3svte+wGDx5MWloac+bMISUlhbZt2/LWW285umKTk5Mxm53z4u7du/n999955513Srzm1VdfzRNPPMF///tfnn76aZo3b86cOXPo2rVrGT5S+coqsGO1GQvFqsVOREREvFmZBk+MHz+e8ePHl/ja/PnzXfa1aNGCpKSk815z1KhRLvffeYNTecbgjmB/H/x9avbNmyIiIuLdtFbsBRQHO7XWiYiIiLdTsLsABTsRERGpKhTsLuBkUbCLVLATERERL6dgdwFqsRMREZGqQsHuAhzBTlOdiIiIiJdTsLuAU+qKFRERkSpCwe4CTnfF+nu4JCIiIiLnp2B3AWqxExERkapCwe4CTmrwhIiIiFQRCnbnYbfbNSpWREREqgwFu/PIzLNSaOQ6IjUqVkRERLycgt15pGXlAxDoayHIr0zL6oqIiIhUGgW78ygOdhG1fD1cEhEREZELU7A7j9PBTt2wIiIi4v0U7M5DwU5ERESqEgW780jLVrATERGRqkPB7jxS1WInIiIiVYiC3XkUd8Vq1QkRERGpChTszsNxj12Qgp2IiIh4PwW789DgCREREalKFOzOQ8FOREREqhIFu/NIyyoAFOxERESkalCwO4ecfCs5BVZAwU5ERESqBgW7c0jNygPAxwzB/hYPl0ZERETkwhTszqH4/rra/mZMJpOHSyMiIiJyYQp251A8OXGov6pIREREqgallnNoHlmLkAAfOtf393RRRERERErFx9MF8FbN6tRi/cN92bI50dNFERERESkVtdidh49F1SMiIiJVh5KLiIiISDWhYCciIiJSTSjYiYiIiFQTCnYiIiIi1YSCnYiIiEg1oWAnIiIiUk0o2ImIiIhUEwp2IiIiItWEgp2IiIhINaFgJyIiIlJNKNiJiIiIVBMKdiIiIiLVhIKdiIiISDWhYCciIiJSTfh4ugBlYbPZAMjJyanQ97FarQBkZ2djsVgq9L2qAtWHK9WJK9WJK9WJM9WHK9WJK9XJacV5pzj/nI/JbrfbK7pA5S01NZW9e/d6uhgiIiIilaZZs2ZERkae95gqGewKCws5efIk/v7+mM3qTRYREZHqy2azkZeXR2hoKD4+5+9srZLBTkRERERcqblLREREpJpQsBMRERGpJhTsRERERKoJBTsRERGRakLB7hwWLFhA37596dixI6NHjyYxMdHTRfKYV155hdjYWKfHoEGDPF2sSvXbb79xxx13cMUVVxAbG8vXX3/t9Lrdbmf27NlcccUVxMXFccstt1T7KXkuVCcPPvigy/dmwoQJHiptxXvjjTcYOXIk8fHxXHbZZfz9739n9+7dTsfk5eUxffp0unfvTnx8PHfddRfHjx/3UIkrXmnq5KabbnL5njz++OMeKnHF+uCDDxgyZAhdunShS5cujB07lu+//97xek37fsCF66QmfT/KS5WcoLiirVy5khkzZjB9+nQ6derEvHnzmDBhAqtWrbrg/DHVVevWrZk7d67jeU2bLDI7O5vY2FhGjhzJ5MmTXV5/8803mT9/PjNnziQ6OprZs2czYcIEVq5cib+/vwdKXPEuVCcAV155JTNmzHA89/Pzq6ziVbp169Zx44030rFjR6xWKy+99BITJkxgxYoVBAUFAfDss8/y/fff8/LLLxMSEsJTTz3F5MmT+eijjzxc+opRmjoBGDNmDHfffbfjeWBgoCeKW+Hq16/PfffdR9OmTbHb7SxdupQ777yTJUuW0Lp16xr3/YAL1wnUnO9HubGLi1GjRtmnT5/ueG61Wu1XXHGF/Y033vBgqTxnzpw59qFDh3q6GF4jJibG/tVXXzme22w2++WXX25/6623HPtOnTpl79Chg3358uWeKGKlO7tO7Ha7ferUqfZJkyZ5qESel5qaao+JibGvW7fObrcb34n27dvbP//8c8cxf/75pz0mJsaekJDgoVJWrrPrxG6328ePH29/+umnPVgqz+rWrZv9448/1vfjDMV1Yrfr+1EW6oo9S35+Plu3bqVnz56OfWazmZ49e5KQkODBknnWvn37uOKKK+jXrx9Tpkzh8OHDni6S1zh48CApKSlO35mQkBA6depUo78zYLTYXHbZZQwcOJBp06aRnp7u6SJVmoyMDABCQ0MB2LJlCwUFBU7fk5YtW9KwYUM2btzoiSJWurPrpNiyZcvo3r071113HbNmzarw5SK9gdVqZcWKFWRnZxMfH6/vB651Uqwmfj8uhrpiz5Keno7VanXpco2MjHS5N6SmiIuLY8aMGTRv3pyUlBRee+01brzxRpYtW0ZwcLCni+dxKSkpACV+Z6r7/THnc+WVV3L11VcTHR3NgQMHeOmll7jtttv43//+V+278m02G88++yxdunQhJiYGgOPHj+Pr60vt2rWdjo2MjHR8h6qzkuoE4LrrrqNhw4bUrVuXpKQkXnzxRfbs2cOrr77qwdJWnKSkJG644Qby8vIICgritddeo1WrVmzfvr3Gfj/OVSdQ874f5UHBTi6od+/eju02bdrQqVMn+vTpw+eff87o0aM9WDLxZtdee61ju/im5/79+zta8aqz6dOns3PnTj744ANPF8VrnKtOxo4d69iOjY0lKiqKW265hf3799OkSZPKLmaFa968OUuXLiUjI4MvvviCqVOn8v7773u6WB51rjpp1apVjft+lAd1xZ4lPDwci8VCamqq0/7U1FTq1KnjoVJ5l9q1a9OsWTP279/v6aJ4haioKAB9Zy6gcePGhIeHs2/fPk8XpUI9+eSTrF69mnnz5lG/fn3H/jp16lBQUMCpU6ecjk9NTXV8h6qrc9VJSTp16gRQbb8nfn5+NG3alA4dOjBlyhTatGnDe++9V6O/H+eqk5JU9+9HeVCwO4ufnx/t27dnzZo1jn02m401a9Y49fnXZFlZWRw4cKDa/2NTWtHR0URFRTl9ZzIzM9m0aZO+M2c4cuQIJ06cqLbfG7vdzpNPPslXX33FvHnzaNy4sdPrHTp0wNfX1+l7snv3bg4fPkznzp0rubSV40J1UpLt27cDVNvvydlsNhv5+fk18vtxLsV1UpKa9v0oC3XFluDWW29l6tSpdOjQgbi4OObNm0dOTg4jRozwdNE84rnnnqNPnz40bNiQY8eO8corr2A2m7nuuus8XbRKk5WV5dRCefDgQbZv305oaCgNGzbk5ptv5vXXX6dp06aO6U7q1q1L//79PVjqinW+OgkNDeXVV19l4MCB1KlThwMHDvDCCy/QtGlTrrzySg+WuuJMnz6d5cuX8+9//5tatWo57osKCQkhICCAkJAQRo4cycyZMwkNDSU4OJinn36a+Pj4avuL+0J1sn//fpYtW0bv3r0JCwsjKSmJGTNm0K1bN9q0aePh0pe/WbNm0atXLxo0aEBWVhbLly9n3bp1vP322zXy+wHnr5Oa9v0oLya73W73dCG80fvvv8/bb79NSkoKbdu25dFHH3U0Adc09957L7/99hsnTpwgIiKCSy65hHvvvbdG3d+wdu1abr75Zpf9w4cPZ+bMmdjtdubMmcPHH3/MqVOnuOSSS5g2bRrNmzf3QGkrx/nq5IknnuDOO+9k27ZtZGRkULduXS6//HLuueeeats9HRsbW+L+GTNmOP5TmJeXx8yZM1mxYgX5+flcccUVTJs2rdq2PlyoTpKTk7n//vvZuXMn2dnZNGjQgP79+/P3v/+9Wg7Mevjhh/n11185duwYISEhxMbGctttt3H55ZcDNe/7Aeevk5r2/SgvCnYiIiIi1YTusRMRERGpJhTsRERERKoJBTsRERGRakLBTkRERKSaULATERERqSYU7ERERESqCQU7ERERkWpCwU5ERESkmlCwExEREakmFOxEREREqgkFOxEREZFq4v8B0iC6W+Rssh4AAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "early_stopping = keras.callbacks.EarlyStopping(\n",
    "    patience=5,\n",
    "    min_delta=0.001,\n",
    "    restore_best_weights=True,\n",
    ")\n",
    "history = model.fit(\n",
    "    X_train, y_train,\n",
    "    validation_data=(X_valid, y_valid),\n",
    "    batch_size=512,\n",
    "    epochs=200,\n",
    "    callbacks=[early_stopping],\n",
    ")\n",
    "\n",
    "history_df = pd.DataFrame(history.history)\n",
    "history_df.loc[:, ['loss', 'val_loss']].plot(title=\"Cross-entropy\")\n",
    "history_df.loc[:, ['binary_accuracy', 'val_binary_accuracy']].plot(title=\"Accuracy\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0dba538",
   "metadata": {
    "papermill": {
     "duration": 0.141565,
     "end_time": "2024-07-11T07:27:30.686921",
     "exception": false,
     "start_time": "2024-07-11T07:27:30.545356",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 3) Train and Evaluate #\n",
    "\n",
    "\n",
    "What do you think about the learning curves? Does it look like the model underfit or overfit? Was the cross-entropy loss a good stand-in for accuracy?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b2b91673",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:27:31.028599Z",
     "iopub.status.busy": "2024-07-11T07:27:31.028221Z",
     "iopub.status.idle": "2024-07-11T07:27:31.036709Z",
     "shell.execute_reply": "2024-07-11T07:27:31.035762Z"
    },
    "papermill": {
     "duration": 0.207362,
     "end_time": "2024-07-11T07:27:31.039052",
     "exception": false,
     "start_time": "2024-07-11T07:27:30.831690",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.3333333333333333, \"interactionType\": 1, \"questionType\": 4, \"questionId\": \"3_Q3\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct:</span> \n",
       "\n",
       "Though we can see the training loss continuing to fall, the early stopping callback prevented any overfitting. Moreover, the accuracy rose at the same rate as the cross-entropy fell, so it appears that minimizing cross-entropy was a good stand-in. All in all, it looks like this training was a success!"
      ],
      "text/plain": [
       "Correct: \n",
       "\n",
       "Though we can see the training loss continuing to fall, the early stopping callback prevented any overfitting. Moreover, the accuracy rose at the same rate as the cross-entropy fell, so it appears that minimizing cross-entropy was a good stand-in. All in all, it looks like this training was a success!"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# View the solution (Run this cell to receive credit!)\n",
    "q_3.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4638481",
   "metadata": {
    "papermill": {
     "duration": 0.141385,
     "end_time": "2024-07-11T07:27:31.322428",
     "exception": false,
     "start_time": "2024-07-11T07:27:31.181043",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Conclusion #\n",
    "\n",
    "Congratulations! You've completed Kaggle's *Introduction to Deep Learning* course!\n",
    "\n",
    "With your new skills you're ready to take on more advanced applications like computer vision and sentiment classification. What would you like to do next?\n",
    "\n",
    "Why not try one of our *Getting Started* competitions?\n",
    "\n",
    "- Classify images with TPUs in [**Petals to the Metal**](https://www.kaggle.com/c/tpu-getting-started)\n",
    "- Create art with GANs in [**I'm Something of a Painter Myself**](https://www.kaggle.com/c/gan-getting-started)\n",
    "- Classify Tweets in [**Real or Not? NLP with Disaster Tweets**](https://www.kaggle.com/c/nlp-getting-started)\n",
    "- Detect contradiction and entailment in [**Contradictory, My Dear Watson**](https://www.kaggle.com/c/contradictory-my-dear-watson)\n",
    "\n",
    "Until next time, Kagglers!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08df8f97",
   "metadata": {
    "papermill": {
     "duration": 0.142113,
     "end_time": "2024-07-11T07:27:31.606971",
     "exception": false,
     "start_time": "2024-07-11T07:27:31.464858",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/intro-to-deep-learning/discussion) to chat with other learners.*"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "cell_metadata_filter": "-all",
   "formats": "ipynb"
  },
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 829369,
     "sourceId": 1480608,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30648,
   "isGpuEnabled": true,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 107.793193,
   "end_time": "2024-07-11T07:27:33.377061",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-11T07:25:45.583868",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
