{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a24fe7a9",
   "metadata": {
    "papermill": {
     "duration": 0.008084,
     "end_time": "2024-07-11T07:25:29.750952",
     "exception": false,
     "start_time": "2024-07-11T07:25:29.742868",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**This notebook is an exercise in the [Intro to Deep Learning](https://www.kaggle.com/learn/intro-to-deep-learning) course.  You can reference the tutorial at [this link](https://www.kaggle.com/ryanholbrook/dropout-and-batch-normalization).**\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d733eb7",
   "metadata": {
    "papermill": {
     "duration": 0.007202,
     "end_time": "2024-07-11T07:25:29.765872",
     "exception": false,
     "start_time": "2024-07-11T07:25:29.758670",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Introduction #\n",
    "\n",
    "In this exercise, you'll add dropout to the *Spotify* model from Exercise 4 and see how batch normalization can let you successfully train models on difficult datasets.\n",
    "\n",
    "Run the next cell to get started!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e7ccb3d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:25:29.783331Z",
     "iopub.status.busy": "2024-07-11T07:25:29.782556Z",
     "iopub.status.idle": "2024-07-11T07:25:30.824490Z",
     "shell.execute_reply": "2024-07-11T07:25:30.823046Z"
    },
    "papermill": {
     "duration": 1.054392,
     "end_time": "2024-07-11T07:25:30.827903",
     "exception": false,
     "start_time": "2024-07-11T07:25:29.773511",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/195640296.py:3: MatplotlibDeprecationWarning: The seaborn styles shipped by Matplotlib are deprecated since 3.6, as they no longer correspond to the styles shipped by seaborn. However, they will remain available as 'seaborn-v0_8-<style>'. Alternatively, directly use the seaborn API instead.\n",
      "  plt.style.use('seaborn-whitegrid')\n"
     ]
    }
   ],
   "source": [
    "# Setup plotting\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('seaborn-whitegrid')\n",
    "# Set Matplotlib defaults\n",
    "plt.rc('figure', autolayout=True)\n",
    "plt.rc('axes', labelweight='bold', labelsize='large',\n",
    "       titleweight='bold', titlesize=18, titlepad=10)\n",
    "plt.rc('animation', html='html5')\n",
    "\n",
    "# Setup feedback system\n",
    "from learntools.core import binder\n",
    "binder.bind(globals())\n",
    "from learntools.deep_learning_intro.ex5 import *"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "994ee206",
   "metadata": {
    "papermill": {
     "duration": 0.007728,
     "end_time": "2024-07-11T07:25:30.844104",
     "exception": false,
     "start_time": "2024-07-11T07:25:30.836376",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "First load the *Spotify* dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "71ea9def",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:25:30.863007Z",
     "iopub.status.busy": "2024-07-11T07:25:30.861824Z",
     "iopub.status.idle": "2024-07-11T07:25:49.398472Z",
     "shell.execute_reply": "2024-07-11T07:25:49.396687Z"
    },
    "papermill": {
     "duration": 18.549118,
     "end_time": "2024-07-11T07:25:49.401236",
     "exception": false,
     "start_time": "2024-07-11T07:25:30.852118",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-07-11 07:25:34.765856: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-07-11 07:25:34.766021: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-07-11 07:25:34.939059: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input shape: [18]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.compose import make_column_transformer\n",
    "from sklearn.model_selection import GroupShuffleSplit\n",
    "\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras import layers\n",
    "from tensorflow.keras import callbacks\n",
    "\n",
    "spotify = pd.read_csv('../input/dl-course-data/spotify.csv')\n",
    "\n",
    "X = spotify.copy().dropna()\n",
    "y = X.pop('track_popularity')\n",
    "artists = X['track_artist']\n",
    "\n",
    "features_num = ['danceability', 'energy', 'key', 'loudness', 'mode',\n",
    "                'speechiness', 'acousticness', 'instrumentalness',\n",
    "                'liveness', 'valence', 'tempo', 'duration_ms']\n",
    "features_cat = ['playlist_genre']\n",
    "\n",
    "preprocessor = make_column_transformer(\n",
    "    (StandardScaler(), features_num),\n",
    "    (OneHotEncoder(), features_cat),\n",
    ")\n",
    "\n",
    "def group_split(X, y, group, train_size=0.75):\n",
    "    splitter = GroupShuffleSplit(train_size=train_size)\n",
    "    train, test = next(splitter.split(X, y, groups=group))\n",
    "    return (X.iloc[train], X.iloc[test], y.iloc[train], y.iloc[test])\n",
    "\n",
    "X_train, X_valid, y_train, y_valid = group_split(X, y, artists)\n",
    "\n",
    "X_train = preprocessor.fit_transform(X_train)\n",
    "X_valid = preprocessor.transform(X_valid)\n",
    "y_train = y_train / 100\n",
    "y_valid = y_valid / 100\n",
    "\n",
    "input_shape = [X_train.shape[1]]\n",
    "print(\"Input shape: {}\".format(input_shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b119caa",
   "metadata": {
    "papermill": {
     "duration": 0.007953,
     "end_time": "2024-07-11T07:25:49.417312",
     "exception": false,
     "start_time": "2024-07-11T07:25:49.409359",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 1) Add Dropout to Spotify Model\n",
    "\n",
    "Here is the last model from Exercise 4. Add two dropout layers, one after the `Dense` layer with 128 units, and one after the `Dense` layer with 64 units. Set the dropout rate on both to `0.3`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2acb65f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:25:49.435757Z",
     "iopub.status.busy": "2024-07-11T07:25:49.435279Z",
     "iopub.status.idle": "2024-07-11T07:25:49.612380Z",
     "shell.execute_reply": "2024-07-11T07:25:49.610896Z"
    },
    "lines_to_next_cell": 2,
    "papermill": {
     "duration": 0.189509,
     "end_time": "2024-07-11T07:25:49.615036",
     "exception": false,
     "start_time": "2024-07-11T07:25:49.425527",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"1_Q1\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# YOUR CODE HERE: Add two 30% dropout layers, one after 128 and one after 64\n",
    "model = keras.Sequential([\n",
    "    layers.Dense(128, activation='relu', input_shape=input_shape),\n",
    "    layers.Dropout(0.3),\n",
    "    layers.Dense(64, activation='relu'),\n",
    "    layers.Dropout(0.3),\n",
    "    layers.Dense(1)\n",
    "])\n",
    "\n",
    "# Check your answer\n",
    "q_1.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0921e993",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:25:49.634328Z",
     "iopub.status.busy": "2024-07-11T07:25:49.633828Z",
     "iopub.status.idle": "2024-07-11T07:25:49.639497Z",
     "shell.execute_reply": "2024-07-11T07:25:49.638119Z"
    },
    "papermill": {
     "duration": 0.01881,
     "end_time": "2024-07-11T07:25:49.642296",
     "exception": false,
     "start_time": "2024-07-11T07:25:49.623486",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#q_1.hint()\n",
    "# q_1.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad23fb94",
   "metadata": {
    "papermill": {
     "duration": 0.008411,
     "end_time": "2024-07-11T07:25:49.659356",
     "exception": false,
     "start_time": "2024-07-11T07:25:49.650945",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now run this next cell to train the model see the effect of adding dropout."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f992e7ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:25:49.679486Z",
     "iopub.status.busy": "2024-07-11T07:25:49.678515Z",
     "iopub.status.idle": "2024-07-11T07:26:04.856036Z",
     "shell.execute_reply": "2024-07-11T07:26:04.854998Z"
    },
    "papermill": {
     "duration": 15.190748,
     "end_time": "2024-07-11T07:26:04.858797",
     "exception": false,
     "start_time": "2024-07-11T07:25:49.668049",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Minimum Validation Loss: 0.1906\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.compile(\n",
    "    optimizer='adam',\n",
    "    loss='mae',\n",
    ")\n",
    "history = model.fit(\n",
    "    X_train, y_train,\n",
    "    validation_data=(X_valid, y_valid),\n",
    "    batch_size=512,\n",
    "    epochs=50,\n",
    "    verbose=0,\n",
    ")\n",
    "history_df = pd.DataFrame(history.history)\n",
    "history_df.loc[:, ['loss', 'val_loss']].plot()\n",
    "print(\"Minimum Validation Loss: {:0.4f}\".format(history_df['val_loss'].min()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b430d03",
   "metadata": {
    "papermill": {
     "duration": 0.009698,
     "end_time": "2024-07-11T07:26:04.882440",
     "exception": false,
     "start_time": "2024-07-11T07:26:04.872742",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2) Evaluate Dropout\n",
    "\n",
    "Recall from Exercise 4 that this model tended to overfit the data around epoch 5. Did adding dropout seem to help prevent overfitting this time?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1ac9f0eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:26:04.903084Z",
     "iopub.status.busy": "2024-07-11T07:26:04.902669Z",
     "iopub.status.idle": "2024-07-11T07:26:04.911789Z",
     "shell.execute_reply": "2024-07-11T07:26:04.910653Z"
    },
    "papermill": {
     "duration": 0.022242,
     "end_time": "2024-07-11T07:26:04.914295",
     "exception": false,
     "start_time": "2024-07-11T07:26:04.892053",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 4, \"questionId\": \"2_Q2\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct:</span> \n",
       "\n",
       "\n",
       "From the learning curves, you can see that the validation loss remains near a constant minimum even though the training loss continues to decrease. So we can see that adding dropout did prevent overfitting this time. Moreover, by making it harder for the network to fit spurious patterns, dropout may have encouraged the network to seek out more of the true patterns, possibly improving the validation loss some as well).\n"
      ],
      "text/plain": [
       "Correct: \n",
       "\n",
       "\n",
       "From the learning curves, you can see that the validation loss remains near a constant minimum even though the training loss continues to decrease. So we can see that adding dropout did prevent overfitting this time. Moreover, by making it harder for the network to fit spurious patterns, dropout may have encouraged the network to seek out more of the true patterns, possibly improving the validation loss some as well)."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# View the solution (Run this cell to receive credit!)\n",
    "q_2.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7788c80d",
   "metadata": {
    "papermill": {
     "duration": 0.008992,
     "end_time": "2024-07-11T07:26:04.932721",
     "exception": false,
     "start_time": "2024-07-11T07:26:04.923729",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now, we'll switch topics to explore how batch normalization can fix problems in training.\n",
    "\n",
    "Load the *Concrete* dataset. We won't do any standardization this time. This will make the effect of batch normalization much more apparent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a0078f8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:26:04.953024Z",
     "iopub.status.busy": "2024-07-11T07:26:04.952602Z",
     "iopub.status.idle": "2024-07-11T07:26:04.974561Z",
     "shell.execute_reply": "2024-07-11T07:26:04.973350Z"
    },
    "papermill": {
     "duration": 0.035304,
     "end_time": "2024-07-11T07:26:04.977321",
     "exception": false,
     "start_time": "2024-07-11T07:26:04.942017",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "concrete = pd.read_csv('../input/dl-course-data/concrete.csv')\n",
    "df = concrete.copy()\n",
    "\n",
    "df_train = df.sample(frac=0.7, random_state=0)\n",
    "df_valid = df.drop(df_train.index)\n",
    "\n",
    "X_train = df_train.drop('CompressiveStrength', axis=1)\n",
    "X_valid = df_valid.drop('CompressiveStrength', axis=1)\n",
    "y_train = df_train['CompressiveStrength']\n",
    "y_valid = df_valid['CompressiveStrength']\n",
    "\n",
    "input_shape = [X_train.shape[1]]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a410b25",
   "metadata": {
    "papermill": {
     "duration": 0.00968,
     "end_time": "2024-07-11T07:26:04.996646",
     "exception": false,
     "start_time": "2024-07-11T07:26:04.986966",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Run the following cell to train the network on the unstandardized *Concrete* data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e9981d94",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:26:05.017081Z",
     "iopub.status.busy": "2024-07-11T07:26:05.016693Z",
     "iopub.status.idle": "2024-07-11T07:26:18.591684Z",
     "shell.execute_reply": "2024-07-11T07:26:18.590133Z"
    },
    "papermill": {
     "duration": 13.588246,
     "end_time": "2024-07-11T07:26:18.594298",
     "exception": false,
     "start_time": "2024-07-11T07:26:05.006052",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Minimum Validation Loss: nan\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = keras.Sequential([\n",
    "    layers.Dense(512, activation='relu', input_shape=input_shape),\n",
    "    layers.Dense(512, activation='relu'),    \n",
    "    layers.Dense(512, activation='relu'),\n",
    "    layers.Dense(1),\n",
    "])\n",
    "model.compile(\n",
    "    optimizer='sgd', # SGD is more sensitive to differences of scale\n",
    "    loss='mae',\n",
    "    metrics=['mae'],\n",
    ")\n",
    "history = model.fit(\n",
    "    X_train, y_train,\n",
    "    validation_data=(X_valid, y_valid),\n",
    "    batch_size=64,\n",
    "    epochs=100,\n",
    "    verbose=0,\n",
    ")\n",
    "\n",
    "history_df = pd.DataFrame(history.history)\n",
    "history_df.loc[0:, ['loss', 'val_loss']].plot()\n",
    "print((\"Minimum Validation Loss: {:0.4f}\").format(history_df['val_loss'].min()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2cdcd095",
   "metadata": {
    "papermill": {
     "duration": 0.009666,
     "end_time": "2024-07-11T07:26:18.613804",
     "exception": false,
     "start_time": "2024-07-11T07:26:18.604138",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Did you end up with a blank graph? Trying to train this network on this dataset will usually fail. Even when it does converge (due to a lucky weight initialization), it tends to converge to a very large number.\n",
    "\n",
    "# 3) Add Batch Normalization Layers\n",
    "\n",
    "Batch normalization can help correct problems like this.\n",
    "\n",
    "Add four `BatchNormalization` layers, one before each of the dense layers. (Remember to move the `input_shape` argument to the new first layer.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8cad1036",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:26:18.635566Z",
     "iopub.status.busy": "2024-07-11T07:26:18.635060Z",
     "iopub.status.idle": "2024-07-11T07:26:18.824083Z",
     "shell.execute_reply": "2024-07-11T07:26:18.822616Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.203584,
     "end_time": "2024-07-11T07:26:18.827203",
     "exception": false,
     "start_time": "2024-07-11T07:26:18.623619",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"3_Q3\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# YOUR CODE HERE: Add a BatchNormalization layer before each Dense layer\n",
    "model = keras.Sequential([\n",
    "    layers.BatchNormalization(input_shape=input_shape),\n",
    "    layers.Dense(512, activation='relu'),\n",
    "    layers.BatchNormalization(),\n",
    "    layers.Dense(512, activation='relu'),\n",
    "    layers.BatchNormalization(),\n",
    "    layers.Dense(512, activation='relu'),\n",
    "    layers.BatchNormalization(),\n",
    "    layers.Dense(1),\n",
    "])\n",
    "\n",
    "# Check your answer\n",
    "q_3.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8794a60e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:26:18.850266Z",
     "iopub.status.busy": "2024-07-11T07:26:18.849828Z",
     "iopub.status.idle": "2024-07-11T07:26:18.855129Z",
     "shell.execute_reply": "2024-07-11T07:26:18.853830Z"
    },
    "papermill": {
     "duration": 0.020077,
     "end_time": "2024-07-11T07:26:18.857983",
     "exception": false,
     "start_time": "2024-07-11T07:26:18.837906",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#q_3.hint()\n",
    "# q_3.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7832db09",
   "metadata": {
    "papermill": {
     "duration": 0.010112,
     "end_time": "2024-07-11T07:26:18.878669",
     "exception": false,
     "start_time": "2024-07-11T07:26:18.868557",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Run the next cell to see if batch normalization will let us train the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "565846c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:26:18.901786Z",
     "iopub.status.busy": "2024-07-11T07:26:18.901407Z",
     "iopub.status.idle": "2024-07-11T07:26:35.881571Z",
     "shell.execute_reply": "2024-07-11T07:26:35.880346Z"
    },
    "papermill": {
     "duration": 16.994915,
     "end_time": "2024-07-11T07:26:35.884351",
     "exception": false,
     "start_time": "2024-07-11T07:26:18.889436",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Minimum Validation Loss: 4.0569\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.compile(\n",
    "    optimizer='sgd',\n",
    "    loss='mae',\n",
    "    metrics=['mae'],\n",
    ")\n",
    "EPOCHS = 100\n",
    "history = model.fit(\n",
    "    X_train, y_train,\n",
    "    validation_data=(X_valid, y_valid),\n",
    "    batch_size=64,\n",
    "    epochs=EPOCHS,\n",
    "    verbose=0,\n",
    ")\n",
    "\n",
    "history_df = pd.DataFrame(history.history)\n",
    "history_df.loc[0:, ['loss', 'val_loss']].plot()\n",
    "print((\"Minimum Validation Loss: {:0.4f}\").format(history_df['val_loss'].min()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96b76812",
   "metadata": {
    "papermill": {
     "duration": 0.012131,
     "end_time": "2024-07-11T07:26:35.907852",
     "exception": false,
     "start_time": "2024-07-11T07:26:35.895721",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 4) Evaluate Batch Normalization\n",
    "\n",
    "Did adding batch normalization help?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "7343cda0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:26:35.933259Z",
     "iopub.status.busy": "2024-07-11T07:26:35.932750Z",
     "iopub.status.idle": "2024-07-11T07:26:35.943478Z",
     "shell.execute_reply": "2024-07-11T07:26:35.942261Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.026463,
     "end_time": "2024-07-11T07:26:35.946019",
     "exception": false,
     "start_time": "2024-07-11T07:26:35.919556",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 4, \"questionId\": \"4_Q4\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct:</span> \n",
       "\n",
       "\n",
       "You can see that adding batch normalization was a big improvement on the first attempt! By adaptively scaling the data as it passes through the network, batch normalization can let you train models on difficult datasets.\n"
      ],
      "text/plain": [
       "Correct: \n",
       "\n",
       "\n",
       "You can see that adding batch normalization was a big improvement on the first attempt! By adaptively scaling the data as it passes through the network, batch normalization can let you train models on difficult datasets."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# View the solution (Run this cell to receive credit!)\n",
    "q_4.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0560562c",
   "metadata": {
    "papermill": {
     "duration": 0.011435,
     "end_time": "2024-07-11T07:26:35.969219",
     "exception": false,
     "start_time": "2024-07-11T07:26:35.957784",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Keep Going #\n",
    "\n",
    "[**Create neural networks**](https://www.kaggle.com/ryanholbrook/binary-classification) for binary classification."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06565655",
   "metadata": {
    "papermill": {
     "duration": 0.011156,
     "end_time": "2024-07-11T07:26:35.992841",
     "exception": false,
     "start_time": "2024-07-11T07:26:35.981685",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/intro-to-deep-learning/discussion) to chat with other learners.*"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "cell_metadata_filter": "-all",
   "formats": "ipynb"
  },
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 829369,
     "sourceId": 1480608,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30648,
   "isGpuEnabled": true,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 72.207072,
   "end_time": "2024-07-11T07:26:38.827652",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-11T07:25:26.620580",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
