{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2b8dffd8",
   "metadata": {
    "papermill": {
     "duration": 0.006217,
     "end_time": "2024-07-04T05:17:53.731101",
     "exception": false,
     "start_time": "2024-07-04T05:17:53.724884",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**This notebook is an exercise in the [Pandas](https://www.kaggle.com/learn/pandas) course.  You can reference the tutorial at [this link](https://www.kaggle.com/residentmario/grouping-and-sorting).**\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c13ba1e",
   "metadata": {
    "papermill": {
     "duration": 0.005489,
     "end_time": "2024-07-04T05:17:53.742463",
     "exception": false,
     "start_time": "2024-07-04T05:17:53.736974",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Introduction\n",
    "\n",
    "In these exercises we'll apply groupwise analysis to our dataset.\n",
    "\n",
    "Run the code cell below to load the data before running the exercises."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5c74aaa3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T05:17:53.755337Z",
     "iopub.status.busy": "2024-07-04T05:17:53.754967Z",
     "iopub.status.idle": "2024-07-04T05:17:57.521961Z",
     "shell.execute_reply": "2024-07-04T05:17:57.520712Z"
    },
    "papermill": {
     "duration": 3.777118,
     "end_time": "2024-07-04T05:17:57.525191",
     "exception": false,
     "start_time": "2024-07-04T05:17:53.748073",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Setup complete.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/learntools/pandas/grouping_and_sorting.py:29: FutureWarning: The provided callable <built-in function min> is currently using SeriesGroupBy.min. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"min\" instead.\n",
      "  _expected = reviews.groupby('variety').price.agg([min, max])\n",
      "/opt/conda/lib/python3.10/site-packages/learntools/pandas/grouping_and_sorting.py:29: FutureWarning: The provided callable <built-in function max> is currently using SeriesGroupBy.max. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"max\" instead.\n",
      "  _expected = reviews.groupby('variety').price.agg([min, max])\n",
      "/opt/conda/lib/python3.10/site-packages/learntools/pandas/grouping_and_sorting.py:35: FutureWarning: The provided callable <built-in function min> is currently using SeriesGroupBy.min. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"min\" instead.\n",
      "  _expected = reviews.groupby('variety').price.agg([min, max]).sort_values(by=['min', 'max'], ascending=False)\n",
      "/opt/conda/lib/python3.10/site-packages/learntools/pandas/grouping_and_sorting.py:35: FutureWarning: The provided callable <built-in function max> is currently using SeriesGroupBy.max. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"max\" instead.\n",
      "  _expected = reviews.groupby('variety').price.agg([min, max]).sort_values(by=['min', 'max'], ascending=False)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "reviews = pd.read_csv(\"../input/wine-reviews/winemag-data-130k-v2.csv\", index_col=0)\n",
    "#pd.set_option(\"display.max_rows\", 5)\n",
    "\n",
    "from learntools.core import binder; binder.bind(globals())\n",
    "from learntools.pandas.grouping_and_sorting import *\n",
    "print(\"Setup complete.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81ea5bc9",
   "metadata": {
    "papermill": {
     "duration": 0.005819,
     "end_time": "2024-07-04T05:17:57.537241",
     "exception": false,
     "start_time": "2024-07-04T05:17:57.531422",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Exercises"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55caf719",
   "metadata": {
    "papermill": {
     "duration": 0.005813,
     "end_time": "2024-07-04T05:17:57.549007",
     "exception": false,
     "start_time": "2024-07-04T05:17:57.543194",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1.\n",
    "Who are the most common wine reviewers in the dataset? Create a `Series` whose index is the `taster_twitter_handle` category from the dataset, and whose values count how many reviews each person wrote."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "dc7a6ecd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T05:17:57.562736Z",
     "iopub.status.busy": "2024-07-04T05:17:57.562334Z",
     "iopub.status.idle": "2024-07-04T05:17:57.583663Z",
     "shell.execute_reply": "2024-07-04T05:17:57.582602Z"
    },
    "papermill": {
     "duration": 0.030903,
     "end_time": "2024-07-04T05:17:57.585913",
     "exception": false,
     "start_time": "2024-07-04T05:17:57.555010",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.16666666666666666, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"1_ReviewsWritten\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct:</span> \n",
       "\n",
       "\n",
       "```python\n",
       "reviews_written = reviews.groupby('taster_twitter_handle').size()\n",
       "```\n",
       "or\n",
       "```python\n",
       "reviews_written = reviews.groupby('taster_twitter_handle').taster_twitter_handle.count()\n",
       "```\n"
      ],
      "text/plain": [
       "Correct: \n",
       "\n",
       "\n",
       "```python\n",
       "reviews_written = reviews.groupby('taster_twitter_handle').size()\n",
       "```\n",
       "or\n",
       "```python\n",
       "reviews_written = reviews.groupby('taster_twitter_handle').taster_twitter_handle.count()\n",
       "```"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Your code here\n",
    "reviews_written = reviews.groupby('taster_twitter_handle').size()\n",
    "\n",
    "# Check your answer\n",
    "q1.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "187848b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T05:17:57.600695Z",
     "iopub.status.busy": "2024-07-04T05:17:57.600326Z",
     "iopub.status.idle": "2024-07-04T05:17:57.604699Z",
     "shell.execute_reply": "2024-07-04T05:17:57.603717Z"
    },
    "papermill": {
     "duration": 0.014782,
     "end_time": "2024-07-04T05:17:57.607021",
     "exception": false,
     "start_time": "2024-07-04T05:17:57.592239",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q1.hint()\n",
    "# q1.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b2730cf",
   "metadata": {
    "papermill": {
     "duration": 0.00632,
     "end_time": "2024-07-04T05:17:57.620072",
     "exception": false,
     "start_time": "2024-07-04T05:17:57.613752",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 2.\n",
    "What is the best wine I can buy for a given amount of money? Create a `Series` whose index is wine prices and whose values is the maximum number of points a wine costing that much was given in a review. Sort the values by price, ascending (so that `4.0` dollars is at the top and `3300.0` dollars is at the bottom)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c14c9d3e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T05:17:57.634676Z",
     "iopub.status.busy": "2024-07-04T05:17:57.634266Z",
     "iopub.status.idle": "2024-07-04T05:17:57.648060Z",
     "shell.execute_reply": "2024-07-04T05:17:57.647142Z"
    },
    "papermill": {
     "duration": 0.023734,
     "end_time": "2024-07-04T05:17:57.650232",
     "exception": false,
     "start_time": "2024-07-04T05:17:57.626498",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.16666666666666666, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"2_BestRatingPerPrice\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "best_rating_per_price = reviews.groupby('price')['points'].max().sort_index()\n",
    "\n",
    "# Check your answer\n",
    "q2.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bf7d1ba9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T05:17:57.665421Z",
     "iopub.status.busy": "2024-07-04T05:17:57.664774Z",
     "iopub.status.idle": "2024-07-04T05:17:57.669013Z",
     "shell.execute_reply": "2024-07-04T05:17:57.667957Z"
    },
    "papermill": {
     "duration": 0.014055,
     "end_time": "2024-07-04T05:17:57.671169",
     "exception": false,
     "start_time": "2024-07-04T05:17:57.657114",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q2.hint()\n",
    "# q2.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a624490e",
   "metadata": {
    "papermill": {
     "duration": 0.006138,
     "end_time": "2024-07-04T05:17:57.683845",
     "exception": false,
     "start_time": "2024-07-04T05:17:57.677707",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 3.\n",
    "What are the minimum and maximum prices for each `variety` of wine? Create a `DataFrame` whose index is the `variety` category from the dataset and whose values are the `min` and `max` values thereof."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "aac69587",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T05:17:57.698305Z",
     "iopub.status.busy": "2024-07-04T05:17:57.697931Z",
     "iopub.status.idle": "2024-07-04T05:17:57.723128Z",
     "shell.execute_reply": "2024-07-04T05:17:57.721964Z"
    },
    "papermill": {
     "duration": 0.03512,
     "end_time": "2024-07-04T05:17:57.725370",
     "exception": false,
     "start_time": "2024-07-04T05:17:57.690250",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/4085108108.py:1: FutureWarning: The provided callable <built-in function min> is currently using SeriesGroupBy.min. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"min\" instead.\n",
      "  price_extremes = reviews.groupby('variety').price.agg([min, max])\n",
      "/tmp/ipykernel_18/4085108108.py:1: FutureWarning: The provided callable <built-in function max> is currently using SeriesGroupBy.max. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"max\" instead.\n",
      "  price_extremes = reviews.groupby('variety').price.agg([min, max])\n"
     ]
    },
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.16666666666666666, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"3_PriceExtremes\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "price_extremes = reviews.groupby('variety').price.agg([min, max])\n",
    "\n",
    "# Check your answer\n",
    "q3.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1e625b65",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T05:17:57.740617Z",
     "iopub.status.busy": "2024-07-04T05:17:57.740238Z",
     "iopub.status.idle": "2024-07-04T05:17:57.744541Z",
     "shell.execute_reply": "2024-07-04T05:17:57.743510Z"
    },
    "papermill": {
     "duration": 0.014745,
     "end_time": "2024-07-04T05:17:57.746895",
     "exception": false,
     "start_time": "2024-07-04T05:17:57.732150",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q3.hint()\n",
    "# q3.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf2ed548",
   "metadata": {
    "papermill": {
     "duration": 0.00666,
     "end_time": "2024-07-04T05:17:57.760710",
     "exception": false,
     "start_time": "2024-07-04T05:17:57.754050",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 4.\n",
    "What are the most expensive wine varieties? Create a variable `sorted_varieties` containing a copy of the dataframe from the previous question where varieties are sorted in descending order based on minimum price, then on maximum price (to break ties)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1fb46964",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T05:17:57.776129Z",
     "iopub.status.busy": "2024-07-04T05:17:57.775755Z",
     "iopub.status.idle": "2024-07-04T05:17:57.786554Z",
     "shell.execute_reply": "2024-07-04T05:17:57.785650Z"
    },
    "papermill": {
     "duration": 0.021183,
     "end_time": "2024-07-04T05:17:57.788646",
     "exception": false,
     "start_time": "2024-07-04T05:17:57.767463",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.16666666666666666, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"4_SortedVarieties\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sorted_varieties = price_extremes.sort_values(by=['min', 'max'], ascending=False)\n",
    "\n",
    "# Check your answer\n",
    "q4.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c84ded20",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T05:17:57.805378Z",
     "iopub.status.busy": "2024-07-04T05:17:57.804488Z",
     "iopub.status.idle": "2024-07-04T05:17:57.808797Z",
     "shell.execute_reply": "2024-07-04T05:17:57.807757Z"
    },
    "papermill": {
     "duration": 0.014656,
     "end_time": "2024-07-04T05:17:57.810950",
     "exception": false,
     "start_time": "2024-07-04T05:17:57.796294",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q4.hint()\n",
    "# q4.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69a1de1b",
   "metadata": {
    "papermill": {
     "duration": 0.008053,
     "end_time": "2024-07-04T05:17:57.826114",
     "exception": false,
     "start_time": "2024-07-04T05:17:57.818061",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 5.\n",
    "Create a `Series` whose index is reviewers and whose values is the average review score given out by that reviewer. Hint: you will need the `taster_name` and `points` columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9ede92c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T05:17:57.842460Z",
     "iopub.status.busy": "2024-07-04T05:17:57.841455Z",
     "iopub.status.idle": "2024-07-04T05:17:57.863585Z",
     "shell.execute_reply": "2024-07-04T05:17:57.862598Z"
    },
    "papermill": {
     "duration": 0.032444,
     "end_time": "2024-07-04T05:17:57.865725",
     "exception": false,
     "start_time": "2024-07-04T05:17:57.833281",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.16666666666666666, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"5_ReviewerMeanRatings\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "reviewer_mean_ratings = reviews.groupby('taster_name').points.mean()\n",
    "\n",
    "# Check your answer\n",
    "q5.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4ead0703",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T05:17:57.882070Z",
     "iopub.status.busy": "2024-07-04T05:17:57.881390Z",
     "iopub.status.idle": "2024-07-04T05:17:57.886028Z",
     "shell.execute_reply": "2024-07-04T05:17:57.884735Z"
    },
    "papermill": {
     "duration": 0.015291,
     "end_time": "2024-07-04T05:17:57.888281",
     "exception": false,
     "start_time": "2024-07-04T05:17:57.872990",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q5.hint()\n",
    "# q5.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "225aebf8",
   "metadata": {
    "papermill": {
     "duration": 0.006946,
     "end_time": "2024-07-04T05:17:57.902485",
     "exception": false,
     "start_time": "2024-07-04T05:17:57.895539",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Are there significant differences in the average scores assigned by the various reviewers? Run the cell below to use the `describe()` method to see a summary of the range of values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6295feea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T05:17:57.919119Z",
     "iopub.status.busy": "2024-07-04T05:17:57.918136Z",
     "iopub.status.idle": "2024-07-04T05:17:57.928461Z",
     "shell.execute_reply": "2024-07-04T05:17:57.927455Z"
    },
    "papermill": {
     "duration": 0.021115,
     "end_time": "2024-07-04T05:17:57.930764",
     "exception": false,
     "start_time": "2024-07-04T05:17:57.909649",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    19.000000\n",
       "mean     88.233026\n",
       "std       1.243610\n",
       "min      85.855422\n",
       "25%      87.323501\n",
       "50%      88.536235\n",
       "75%      88.975256\n",
       "max      90.562551\n",
       "Name: points, dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reviewer_mean_ratings.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf3d73ff",
   "metadata": {
    "papermill": {
     "duration": 0.007316,
     "end_time": "2024-07-04T05:17:57.945579",
     "exception": false,
     "start_time": "2024-07-04T05:17:57.938263",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 6.\n",
    "What combination of countries and varieties are most common? Create a `Series` whose index is a `MultiIndex`of `{country, variety}` pairs. For example, a pinot noir produced in the US should map to `{\"US\", \"Pinot Noir\"}`. Sort the values in the `Series` in descending order based on wine count."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "992ecd8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T05:17:57.962501Z",
     "iopub.status.busy": "2024-07-04T05:17:57.961621Z",
     "iopub.status.idle": "2024-07-04T05:17:57.998050Z",
     "shell.execute_reply": "2024-07-04T05:17:57.997013Z"
    },
    "papermill": {
     "duration": 0.047414,
     "end_time": "2024-07-04T05:17:58.000480",
     "exception": false,
     "start_time": "2024-07-04T05:17:57.953066",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.16666666666666666, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"6_GroupbyCountryVariety\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "country_variety_counts = reviews.groupby(['country', 'variety']).size().sort_values(ascending=False)\n",
    "\n",
    "# Check your answer\n",
    "q6.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6127e294",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T05:17:58.017696Z",
     "iopub.status.busy": "2024-07-04T05:17:58.017305Z",
     "iopub.status.idle": "2024-07-04T05:17:58.021514Z",
     "shell.execute_reply": "2024-07-04T05:17:58.020568Z"
    },
    "papermill": {
     "duration": 0.015276,
     "end_time": "2024-07-04T05:17:58.023480",
     "exception": false,
     "start_time": "2024-07-04T05:17:58.008204",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q6.hint()\n",
    "# q6.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f74906a",
   "metadata": {
    "papermill": {
     "duration": 0.007475,
     "end_time": "2024-07-04T05:17:58.038629",
     "exception": false,
     "start_time": "2024-07-04T05:17:58.031154",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Keep going\n",
    "\n",
    "Move on to the [**data types and missing data**](https://www.kaggle.com/residentmario/data-types-and-missing-values)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d17bd70",
   "metadata": {
    "papermill": {
     "duration": 0.007359,
     "end_time": "2024-07-04T05:17:58.053611",
     "exception": false,
     "start_time": "2024-07-04T05:17:58.046252",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/pandas/discussion) to chat with other learners.*"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 655,
     "sourceId": 1252,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 2321,
     "sourceId": 3919,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 2894,
     "sourceId": 4877,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 3491,
     "sourceId": 5624,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 1442,
     "sourceId": 8172,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 9366,
     "sourceId": 13206,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 179555,
     "sourceId": 403916,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 4549,
     "sourceId": 466349,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 2478,
     "sourceId": 1151655,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 10128,
     "sourceId": 5438389,
     "sourceType": "datasetVersion"
    }
   ],
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7.470579,
   "end_time": "2024-07-04T05:17:58.581623",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-04T05:17:51.111044",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
